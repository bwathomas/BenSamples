"""
What is this?

This is a simple, interactive data processing and visualization program I wrote. The goal of this program is
to disaggregate gender bias in reviews on ratemyprofessors. The user inputs a search word, and the window presents
six bar graphs, showing (to scale) the proportion of times that worst was used in low, middle, and high reviews
by gender.

Holistically, the program is composed of three parts:
biasbarsgui, which is a simple program to generate the window and accept search terms. This was provided by the
professor.
biasbarsdata, which does the data processing.
biasbars, which displays the processed data on the window.
"""
import tkinter
import biasbarsdata
import biasbarsgui as gui


# Provided constants to load and plot the word frequency data
WINDOW_WIDTH = 1000
WINDOW_HEIGHT = 550

FILENAME = "[insert file name here]"

VERTICAL_MARGIN = 30
LEFT_MARGIN = 60
RIGHT_MARGIN = 30
LABELS = ["Low Reviews", "Medium Reviews", "High Reviews"]
LABEL_OFFSET = 20
BAR_WIDTH = 75
LINE_WIDTH = 2
TEXT_DX = 2
NUM_VERTICAL_DIVISIONS = 7
TICK_WIDTH = 15

# This helper function finds the center of the window draw by biasbarsgui
def get_centered_x_coordinate(idx):
    width_incriment = ((WINDOW_WIDTH - RIGHT_MARGIN - LEFT_MARGIN) // 6)
    x = (LEFT_MARGIN + width_incriment + (2 * idx * width_incriment))
    return x


# This draws content on the interactive window which does not move, such as the outline of the bar graph
def draw_fixed_content(canvas):
    canvas.delete('all')            # delete all existing content from the canvas
    width = canvas.winfo_width()    # get the width of the canvas
    height = canvas.winfo_height()  # get the height of the canvas
    # This creates the main window for the graphs
    canvas.create_rectangle(LEFT_MARGIN, VERTICAL_MARGIN, (width - RIGHT_MARGIN), (height - VERTICAL_MARGIN), width=LINE_WIDTH)
    # This creates the Labels
    for i in range(len(LABELS)):
        x = get_centered_x_coordinate(width, i)
        canvas.create_text(x, (height - LABEL_OFFSET), anchor=tkinter.N, text=LABELS[i])

# Given the word, selected by the user, and word_data, generated by biasbarsdata, this produces the bars on the bar graph
def plot_word(canvas, word_data, word):
    draw_fixed_content(canvas)
    width = canvas.winfo_width()
    height = canvas.winfo_height()
    gender_data = word_data[word]
    print(gender_data)
    max_frequency = max(max(gender_data[biasbarsdata.KEY_WOMEN]), max(gender_data[biasbarsdata.KEY_MEN]))

    # Draws ticks
    height_interation = ((height - (2 * VERTICAL_MARGIN)) / (NUM_VERTICAL_DIVISIONS - 1))
    frequency_iteration = (max_frequency / NUM_VERTICAL_DIVISIONS)
    for i in range(NUM_VERTICAL_DIVISIONS):
        canvas.create_line((LEFT_MARGIN - (TICK_WIDTH / 2)), (VERTICAL_MARGIN + (i * height_interation)), (LEFT_MARGIN + (TICK_WIDTH / 2)), (VERTICAL_MARGIN + (i * height_interation)), width=LINE_WIDTH)
        canvas.create_text((LEFT_MARGIN - (TICK_WIDTH / 2)), ((height - VERTICAL_MARGIN) - (i * height_interation)), anchor=tkinter.E, text=str(round(i * frequency_iteration)))
    # Draw bars
    male_data = gender_data['M']
    female_data = gender_data['W']
    for i in range(3):
        x = get_centered_x_coordinate(width, i)
        if not male_data[i] == 0:
            m_freq = (male_data[i] / max_frequency)
            canvas.create_rectangle((x - BAR_WIDTH), ((height - VERTICAL_MARGIN) - (m_freq * (height - (2 * VERTICAL_MARGIN)))), x, (height - VERTICAL_MARGIN), fill='dodgerblue', width=LINE_WIDTH)
            canvas.create_text((x - BAR_WIDTH + TEXT_DX), ((height - VERTICAL_MARGIN) - (m_freq * (height - (2 * VERTICAL_MARGIN)))),anchor=tkinter.NW, text='M')
        if not female_data[i] == 0:
            f_freq = (female_data[i] / max_frequency)
            canvas.create_rectangle(x, ((height - VERTICAL_MARGIN) - (f_freq * (height - (2 * VERTICAL_MARGIN)))), (x + BAR_WIDTH), (height - VERTICAL_MARGIN), fill='orange', width=LINE_WIDTH)
            canvas.create_text((x + TEXT_DX), ((height - VERTICAL_MARGIN) - (f_freq * (height - (2 * VERTICAL_MARGIN)))), anchor=tkinter.NW, text='F')

#This helper function was provided to me
def convert_counts_to_frequencies(word_data):
    K = 1000000
    total_words_men = sum([sum(counts[biasbarsdata.KEY_MEN]) for word, counts in word_data.items()])
    total_words_women = sum([sum(counts[biasbarsdata.KEY_WOMEN]) for word, counts in word_data.items()])
    for word in word_data:
        gender_data = word_data[word]
        for i in range(3):
            gender_data[biasbarsdata.KEY_MEN][i] *= K / total_words_men
            gender_data[biasbarsdata.KEY_WOMEN][i] *= K / total_words_women


# main() code was provided
def main():
    import sys
    args = sys.argv[1:]
    global WINDOW_WIDTH
    global WINDOW_HEIGHT
    if len(args) == 2:
        WINDOW_WIDTH = int(args[0])
        WINDOW_HEIGHT = int(args[1])

    # Load data
    word_data = biasbarsdata.read_file(FILENAME)
    convert_counts_to_frequencies(word_data)

    # Make window
    top = tkinter.Tk()
    top.wm_title('Bias Bars')
    canvas = gui.make_gui(top, WINDOW_WIDTH, WINDOW_HEIGHT, word_data, plot_word, biasbarsdata.search_words)

    # draw_fixed once at startup so we have the borders and labels
    # even before the user types anything.
    draw_fixed_content(canvas)

    # This needs to be called just once
    top.mainloop()


if __name__ == '__main__':
    main()
